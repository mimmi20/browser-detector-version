<?php

namespace BrowserDetectorTest\Version;

use BrowserDetector\Version\VersionFactory;

/**
 * Test class for KreditCore_Class_BrowserDetector.
 * Generated by PHPUnit on 2010-09-05 at 22:13:26.
 */
class VersionFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider providerSet
     * @group        version
     *
     * @param string $version
     * @param string $major
     * @param string $minor
     * @param string $patch
     * @param string $preRelease
     * @param string $build
     * @param string $complete
     */
    public function testVersionSet($version, $major, $minor, $patch, $preRelease, $build, $complete)
    {
        $object = VersionFactory::set($version);

        self::assertInstanceOf('\BrowserDetector\Version\Version', $object);

        self::assertSame($major, $object->getMajor(), 'major is wrong');
        self::assertSame($minor, $object->getMinor(), 'minor is wrong');
        self::assertSame($patch, $object->getMicro(), 'patch is wrong');
        self::assertSame($preRelease, $object->getStability(), 'pre-release is wrong');
        self::assertSame($build, $object->getBuild(), 'build is wrong');
        self::assertSame($complete, (string) $object, 'complete is wrong');
    }

    public function providerSet()
    {
        return [
            ['34.0.1760.0', '34', '0', '1760.0', 'stable', null, '34.0.1760.0'],
            ['3.9.0.0.22', '3', '9', '0.0.22', 'stable', null, '3.9.0.0.22'],
            ['4.1.1', '4', '1', '1', 'stable', null, '4.1.1'],
            ['7.0', '7', '0', '0', 'stable', null, '7.0.0'],
            ['1.17.0-rc', '1', '17', '0', 'RC', null, '1.17.0-RC'],
            ['4.3.2f1', '4', '3', '2', 'stable', null, '4.3.2'],
            ['v0.1.4', '0', '1', '4', 'stable', null, '0.1.4'],
            ['2.0b8', '2', '0', '0', 'beta', '8', '2.0.0-beta+8'],
            ['4.0b8', '4', '0', '0', 'beta', '8', '4.0.0-beta+8'],
        ];
    }

    /**
     * @dataProvider providerDetectVersion
     * @group        version
     *
     * @param string $uapart
     * @param string $search
     * @param string $major
     * @param string $minor
     * @param string $patch
     * @param string $preRelease
     * @param string $build
     * @param string $complete
     */
    public function testVersionDetectVersion($uapart, $search, $major, $minor, $patch, $preRelease, $build, $complete)
    {
        $object = VersionFactory::detectVersion($uapart, $search);

        self::assertInstanceOf('\BrowserDetector\Version\Version', $object);

        self::assertSame($major, $object->getMajor(), 'major is wrong');
        self::assertSame($minor, $object->getMinor(), 'minor is wrong');
        self::assertSame($patch, $object->getMicro(), 'patch is wrong');
        self::assertSame($preRelease, $object->getStability(), 'pre-release is wrong');
        self::assertSame($build, $object->getBuild(), 'build is wrong');
        self::assertSame($complete, (string) $object, 'complete is wrong');
    }

    public function providerDetectVersion()
    {
        return [
            ['Chrome/34.0.1760.0', 'Chrome', '34', '0', '1760.0', 'stable', null, '34.0.1760.0'],
            ['Firefox/4.0b8', 'Firefox', '4', '0', '0', 'beta', '8', '4.0.0-beta+8'],
        ];
    }

    /**
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage a string or an array of strings is expected as parameter
     * @group        version
     */
    public function testThrowExcepton()
    {
        VersionFactory::detectVersion('abc', 1);
    }
}
